[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PGCAPData",
    "section": "",
    "text": "Este site apresenta várias análises sobre o Programa de Pós-Graduação em Computação Aplicada, usando bases de dados acadêmicas internas, algumas extraídas do Qualis e Sucupira (dados abertos da CAPES).\nAinda está bastante incompleto."
  },
  {
    "objectID": "ofertas.html",
    "href": "ofertas.html",
    "title": "Ofertas de Disciplinas",
    "section": "",
    "text": "Esta seção do notebook apresenta informações sobre oferta e matrícula em disciplinas da CAP.\nA base de dados foi extraída do controle acadêmico do INPE e contém todas as matrículas feitas em todas as disciplinas oferecidas entre 2003 e 2023 no INPE, incluindo gênero dos alunos e números de registros.\nA base de dados (matriculados.csv) pode ser baixada aqui.\nPrimeiro importamos as bibliotecas que serão usadas neste notebook:\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom itables import show\nfrom itertools import product"
  },
  {
    "objectID": "ofertas.html#sobre",
    "href": "ofertas.html#sobre",
    "title": "Ofertas de Disciplinas",
    "section": "",
    "text": "Esta seção do notebook apresenta informações sobre oferta e matrícula em disciplinas da CAP.\nA base de dados foi extraída do controle acadêmico do INPE e contém todas as matrículas feitas em todas as disciplinas oferecidas entre 2003 e 2023 no INPE, incluindo gênero dos alunos e números de registros.\nA base de dados (matriculados.csv) pode ser baixada aqui.\nPrimeiro importamos as bibliotecas que serão usadas neste notebook:\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom itables import show\nfrom itertools import product"
  },
  {
    "objectID": "ofertas.html#leitura-e-filtro",
    "href": "ofertas.html#leitura-e-filtro",
    "title": "Ofertas de Disciplinas",
    "section": "Leitura e Filtro",
    "text": "Leitura e Filtro\n\nfile = 'Data/matriculados.csv'\ndf = pd.read_csv(file)\n\nEsta base contém registros de matrículas em disciplinas que não foram oferecidas pela CAP. Para filtrá-las eliminamos os registros com disciplinas que não começam com o código CAP.\n\ndf = df[df['Disciplina'].str.startswith('CAP')]\n\nVamos também criar um campo Ano a partir do campo Periodo para facilitar alguns filtros.\n\ndf['Ano'] = pd.to_datetime(df['Periodo'], format='%Y%m').dt.year\n\nCom isto podemos selecionar somente disciplinas oferecidas nos últimos dez anos.\n\ndf = df[df['Ano'] &gt;= 2014]\n\nUsamos uma tabela interativa para mostrar parte dos dados importados.\n\nshow(df)\n\n\n\n\n\n\n\n\n\nDisciplina\nPeriodo\nRegistro\nSexo\nPrograma\nAno\n\n\n\n\nLoading... (need help?)"
  },
  {
    "objectID": "ofertas.html#análise-exploratória-de-dados",
    "href": "ofertas.html#análise-exploratória-de-dados",
    "title": "Ofertas de Disciplinas",
    "section": "Análise Exploratória de Dados",
    "text": "Análise Exploratória de Dados\n\nQuantos alunos de outros programas se matricularam?\nVamos ver como é a procura anual pelas disciplinas, considerando os programas de origem dos alunos matriculados.\n\n# Criamos uma tabela de cores específica.\ncolor_cats={\"Programa\": ['PGCAP','ISOLADA','PGETE','PGAST',\\\n                         'PGSER','PGGES','PGMET','PGCST']}\ncolor_seq=[\"#0D7FBD\",\"#A0A0A0\",\"#845EC2\",\"#D65DB1\",\\\n           \"#FF6F91\",\"#FF9671\",\"#FFC75F\",\"#F9F871\"]\n# Criamos a figura.\nfig = px.histogram(df, x='Ano', color='Programa',\n                   title='Estudantes Matriculados por Programa e Ano',\n                   color_discrete_sequence=color_seq,\n                   category_orders=color_cats,\n                   )\n# Configurações adicionais.                   \nfig.update_yaxes(title_text='Número de Matriculados')\nfig.update_layout(xaxis = {'type' : 'category'})\nfig.update_layout(bargap=0.1)                   \nfig.show()\n\n\n                                                \n\n\n\n\nComo é a procura por disciplinas?\nPara analisar a procura por disciplinas precisamos reorganizar os dados em uma matriz de forma que as linhas correspondam às disciplinas, as colunas aos anos e as células com o número de alunos matriculados naquela disciplina e naquele ano.\n\ndfMap = pd.pivot_table(df, values='Registro', index='Disciplina', \\\n                       columns='Ano',aggfunc='size', fill_value=0)\n\nCom esta matriz podemos fazer um heatmap que mostra a procura por ano e por disciplina.\n\n# Criamos o heatmap.\nfig = go.Figure(data=go.Heatmap(z=dfMap.values, x=dfMap.columns, y=dfMap.index,\\\n                                hovertemplate='Ano: %{x}&lt;br&gt;Disciplina: %{y}&lt;br&gt;'+\\\n                                'Total: %{z}&lt;extra&gt;&lt;/extra&gt;',\\\n                                colorscale='Blackbody'))\n# Adicionamos texto para cada célula.\nannotations = [] \nlimColor = np.max(dfMap.values) / 2\nfor i, y_val in enumerate(dfMap.index):\n    for j, x_val in enumerate(dfMap.columns):\n        num_students = dfMap.values[i, j]\n        annotations.append(\n            go.layout.Annotation(\n                x=x_val,\n                y=y_val,\n                text=f'{num_students}',\n                showarrow=False,\n                font=dict(color='white' if num_students&lt;limColor \\\n                                        else 'black',size=8)\n            )\n        )      \nfig.update_layout(annotations=annotations)\n# Ajustamos o tamanho do gráfico, legenda do eixo, título.\nfig.update_layout(\n    height=1600,  \n    width=  850,  \n    title='Número de Matriculados por Disciplina e Ano',\n    xaxis=dict(\n        tickmode='array',  \n        tickvals=list(dfMap.columns),  \n        ticktext=list(dfMap.columns.astype(str)),  \n        tickangle=45,  \n    ),\n) \n# Ajustamos as fontes usadas para texto nos eixos.\nfig.update_xaxes(tickfont=dict(size=8))\nfig.update_yaxes(tickfont=dict(size=10))\n# Escondemos a legenda.\nfig.update_traces(showscale=False)\n# Mostramos o gráfico.\nfig.show()\n\n\n                                                \n\n\nPodemos criar um segundo heatmap para mostrar o percentual de matriculados por disciplina e por ano que são alunos regularmente matriculados no programa PGCAP.\n\ndfPGCAP = (pd.pivot_table(df[df['Programa'] == 'PGCAP'], values='Registro',\\\n                          index='Disciplina',columns='Ano', aggfunc='size',\\\n                          fill_value=0) / dfMap) * 100\ndfPGCAP = dfPGCAP.fillna(0)\n\nCom esta matriz podemos fazer um heatmap que mostra para cada disciplina e cada ano a proporção de alunos da PGCAP.\n\n# Criamos o heatmap.\nfig = go.Figure(data=go.Heatmap(z=dfPGCAP.values, x=dfPGCAP.columns, y=dfPGCAP.index,\\\n                                hovertemplate='Ano: %{x}&lt;br&gt;Disciplina: %{y}&lt;br&gt;'+\\\n                                'Percentual da PGCAP: %{z:.2f}%&lt;extra&gt;&lt;/extra&gt;',\\\n                                colorscale='Blackbody'))\n# Adicionamos texto para cada célula.\nannotations = [] \nlimColor = np.max(dfPGCAP.values) / 2\nfor i, y_val in enumerate(dfPGCAP.index):\n    for j, x_val in enumerate(dfPGCAP.columns):\n        num_students = dfPGCAP.values[i, j]\n        formatted = '{:.2f}'.format(num_students)\n        annotations.append(\n            go.layout.Annotation(\n                x=x_val,\n                y=y_val,\n                text=formatted,\n                showarrow=False,\n                font=dict(color='white' if num_students&lt;limColor \\\n                                        else 'black',size=8)\n            )\n        ) \nfig.update_layout(annotations=annotations)\n# Ajustamos o tamanho do gráfico, legenda do eixo, título.\nfig.update_layout(\n    height=1600,  \n    width=  850,  \n    title='Percentual dos Matriculados que são da PGCAP, por Disciplina e Ano',\n    xaxis=dict(\n        tickmode='array',  \n        tickvals=list(dfPGCAP.columns),  \n        ticktext=list(dfPGCAP.columns.astype(str)),  \n        tickangle=45,  \n    ),\n) \n# Ajustamos as fontes usadas para texto nos eixos.\nfig.update_xaxes(tickfont=dict(size=8))\nfig.update_yaxes(tickfont=dict(size=10))\n# Escondemos a legenda.\nfig.update_traces(showscale=False)\n# Mostramos o gráfico.\nfig.show()"
  }
]