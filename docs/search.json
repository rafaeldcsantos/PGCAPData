[
  {
    "objectID": "ofertas.html",
    "href": "ofertas.html",
    "title": "Ofertas de Disciplinas",
    "section": "",
    "text": "Esta seção do notebook apresenta informações sobre oferta e matrícula em disciplinas da CAP.\nA base de dados foi extraída do controle acadêmico do INPE e contém todas as matrículas feitas em todas as disciplinas oferecidas entre 2003 e 2023 no INPE, incluindo gênero dos alunos e números de registros.\nA base de dados (matriculados.csv) pode ser baixada aqui. Seus campos são:\n\nDisciplina: o nome completo (com código) da disciplina em que o aluno se matriculou;\nPeriodo: o período (YYYYPP) em que o aluno se matriculou;\nRegistro: o número de registro do egresso (ofuscado);\nSexo: o sexo do aluno;\nPrograma: o código do programa no qual o aluno regular está matriculado; ou ISOLADA.\n\nPrimeiro importamos as bibliotecas que serão usadas neste notebook:\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom itertools import product"
  },
  {
    "objectID": "ofertas.html#sobre",
    "href": "ofertas.html#sobre",
    "title": "Ofertas de Disciplinas",
    "section": "",
    "text": "Esta seção do notebook apresenta informações sobre oferta e matrícula em disciplinas da CAP.\nA base de dados foi extraída do controle acadêmico do INPE e contém todas as matrículas feitas em todas as disciplinas oferecidas entre 2003 e 2023 no INPE, incluindo gênero dos alunos e números de registros.\nA base de dados (matriculados.csv) pode ser baixada aqui. Seus campos são:\n\nDisciplina: o nome completo (com código) da disciplina em que o aluno se matriculou;\nPeriodo: o período (YYYYPP) em que o aluno se matriculou;\nRegistro: o número de registro do egresso (ofuscado);\nSexo: o sexo do aluno;\nPrograma: o código do programa no qual o aluno regular está matriculado; ou ISOLADA.\n\nPrimeiro importamos as bibliotecas que serão usadas neste notebook:\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom itertools import product"
  },
  {
    "objectID": "ofertas.html#leitura-e-filtro",
    "href": "ofertas.html#leitura-e-filtro",
    "title": "Ofertas de Disciplinas",
    "section": "Leitura e Filtro",
    "text": "Leitura e Filtro\n\nfile = 'Data/matriculados.csv'\ndf = pd.read_csv(file)\n\nEsta base contém registros de matrículas em disciplinas que não foram oferecidas pela CAP. Para filtrá-las eliminamos os registros com disciplinas que não começam com o código CAP.\n\ndf = df[df['Disciplina'].str.startswith('CAP')]\n\nVamos também criar um campo Ano a partir do campo Periodo para facilitar alguns filtros, e uma versão do campo Periodo que pode ser processada como valores inteiros.\n\ndf['Ano'] = pd.to_datetime(df['Periodo'], format='%Y%m').dt.year\ndf['PeriodoSemAno'] = df['Periodo'] % 10\n\nCom isto podemos selecionar somente disciplinas oferecidas nos últimos dez anos.\n\ndf = df[df['Ano'] &gt;= 2014]"
  },
  {
    "objectID": "ofertas.html#análise-exploratória-de-dados",
    "href": "ofertas.html#análise-exploratória-de-dados",
    "title": "Ofertas de Disciplinas",
    "section": "Análise Exploratória de Dados",
    "text": "Análise Exploratória de Dados\n\nQuantos alunos de outros programas se matricularam?\nVamos ver como é a procura anual pelas disciplinas, considerando os programas de origem dos alunos matriculados.\n\n# Criamos uma tabela de cores específica.\ncolor_cats={\"Programa\": ['PGCAP','ISOLADA','PGETE','PGAST',\\\n                         'PGSER','PGGES','PGMET','PGCST']}\ncolor_seq=[\"#0D7FBD\",\"#A0A0A0\",\"#845EC2\",\"#D65DB1\",\\\n           \"#FF6F91\",\"#FF9671\",\"#FFC75F\",\"#F9F871\"]\n# Criamos a figura.\nfig = px.histogram(df, x='Ano', color='Programa',\n                   title='Estudantes Matriculados por Programa e Ano',\n                   color_discrete_sequence=color_seq,\n                   category_orders=color_cats,\n                   )\n# Configurações adicionais.                   \nfig.update_yaxes(title_text='Número de Matriculados')\nfig.update_layout(xaxis = {'type' : 'category'})\nfig.update_layout(bargap=0.1)                   \nfig.show()\n\n                                                \n\n\n\n# Criamos uma tabela de cores específica.\ncolor_cats={\"Programa\": ['PGCAP','ISOLADA','PGETE','PGAST',\\\n                         'PGSER','PGGES','PGMET','PGCST']}\ncolor_seq=[\"#0D7FBD\",\"#A0A0A0\",\"#845EC2\",\"#D65DB1\",\\\n           \"#FF6F91\",\"#FF9671\",\"#FFC75F\",\"#F9F871\"]\nperiodo_order = sorted(df['Periodo'].unique())\n# Criamos a figura.\nfig = px.histogram(df, x='Periodo', color='Programa',\n                   title='Estudantes Matriculados por Programa e Período',\n                   color_discrete_sequence=color_seq,\n                   category_orders={'Periodo': periodo_order},\n                   )                   \n# Configurações adicionais.                   \nfig.update_yaxes(title_text='Número de Matriculados')\nfig.update_layout(xaxis = {'type' : 'category'})\nfig.show()\n\n                                                \n\n\n\n\nComo é a procura por disciplinas?\nPara analisar a procura por disciplinas precisamos reorganizar os dados em uma matriz de forma que as linhas correspondam às disciplinas, as colunas aos anos e as células com o número de alunos matriculados naquela disciplina e naquele ano.\n\ndfMap = pd.pivot_table(df, values='Registro', index='Disciplina', \\\n                       columns='Ano',aggfunc='size', fill_value=0)\n\nCom esta matriz podemos fazer um heatmap que mostra a procura por ano e por disciplina.\n\n# Criamos o heatmap.\nfig = go.Figure(data=go.Heatmap(z=dfMap.values, x=dfMap.columns, y=dfMap.index,\\\n                                hovertemplate='Ano: %{x}&lt;br&gt;Disciplina: %{y}&lt;br&gt;'+\\\n                                'Total: %{z}&lt;extra&gt;&lt;/extra&gt;',\\\n                                colorscale='Blackbody'))\n# Adicionamos texto para cada célula.\nannotations = [] \nlimColor = np.max(dfMap.values) / 2\nfor i, y_val in enumerate(dfMap.index):\n    for j, x_val in enumerate(dfMap.columns):\n        num_students = dfMap.values[i, j]\n        annotations.append(\n            go.layout.Annotation(\n                x=x_val,\n                y=y_val,\n                text=f'{num_students}',\n                showarrow=False,\n                font=dict(color='white' if num_students&lt;limColor \\\n                                        else 'black',size=8)\n            )\n        )      \nfig.update_layout(annotations=annotations)\n# Ajustamos o tamanho do gráfico, legenda do eixo, título.\nfig.update_layout(\n    height=1600,  \n    width=  850,  \n    title='Número de Matriculados por Disciplina e Ano',\n    xaxis=dict(\n        tickmode='array',  \n        tickvals=list(dfMap.columns),  \n        ticktext=list(dfMap.columns.astype(str)),  \n        tickangle=45,  \n    ),\n) \n# Ajustamos as fontes usadas para texto nos eixos.\nfig.update_xaxes(tickfont=dict(size=8))\nfig.update_yaxes(tickfont=dict(size=10))\n# Escondemos a legenda.\nfig.update_traces(showscale=False)\n\n\n\n# Mostramos o gráfico.\nfig.show()\n\n                                                \n\n\nPodemos criar um segundo heatmap para mostrar o percentual de matriculados por disciplina e por ano que são alunos regularmente matriculados no programa PGCAP.\n\ndfPGCAP = (pd.pivot_table(df[df['Programa'] == 'PGCAP'], values='Registro',\\\n                          index='Disciplina',columns='Ano', aggfunc='size',\\\n                          fill_value=0) / dfMap) * 100\ndfPGCAP = dfPGCAP.fillna(0)\n\nCom esta matriz podemos fazer um heatmap que mostra para cada disciplina e cada ano a proporção de alunos da PGCAP.\n\n# Criamos o heatmap.\nfig = go.Figure(data=go.Heatmap(z=dfPGCAP.values, x=dfPGCAP.columns, y=dfPGCAP.index,\\\n                                hovertemplate='Ano: %{x}&lt;br&gt;Disciplina: %{y}&lt;br&gt;'+\\\n                                'Percentual da PGCAP: %{z:.2f}%&lt;extra&gt;&lt;/extra&gt;',\\\n                                colorscale='Blackbody'))\n# Adicionamos texto para cada célula.\nannotations = [] \nlimColor = np.max(dfPGCAP.values) / 2\nfor i, y_val in enumerate(dfPGCAP.index):\n    for j, x_val in enumerate(dfPGCAP.columns):\n        num_students = dfPGCAP.values[i, j]\n        formatted = '{:.2f}'.format(num_students)\n        annotations.append(\n            go.layout.Annotation(\n                x=x_val,\n                y=y_val,\n                text=formatted,\n                showarrow=False,\n                font=dict(color='white' if num_students&lt;limColor \\\n                                        else 'black',size=8)\n            )\n        ) \nfig.update_layout(annotations=annotations)\n# Ajustamos o tamanho do gráfico, legenda do eixo, título.\nfig.update_layout(\n    height=1600,  \n    width=  850,  \n    title='Percentual dos Matriculados que são da PGCAP, por Disciplina e Ano',\n    xaxis=dict(\n        tickmode='array',  \n        tickvals=list(dfPGCAP.columns),  \n        ticktext=list(dfPGCAP.columns.astype(str)),  \n        tickangle=45,  \n    ),\n) \n# Ajustamos as fontes usadas para texto nos eixos.\nfig.update_xaxes(tickfont=dict(size=8))\nfig.update_yaxes(tickfont=dict(size=10))\n# Escondemos a legenda.\nfig.update_traces(showscale=False)\n# Mostramos o gráfico.\nfig.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PGCAPData",
    "section": "",
    "text": "Este site apresenta várias análises sobre o Programa de Pós-Graduação em Computação Aplicada, usando bases de dados acadêmicas internas, algumas extraídas do Qualis e Sucupira (dados abertos da CAPES).\nAinda está bastante incompleto, e muitas perguntas interessantes não poderão ser respondidas somente com as bases de dados disponíveis."
  },
  {
    "objectID": "egressos.html",
    "href": "egressos.html",
    "title": "Egressos",
    "section": "",
    "text": "Esta seção do notebook apresenta informações sobre os egressos da CAP.\nA base de dados foi extraída do controle acadêmico do INPE e contém informações sobre todos os egressos na mesma. É possível que nem todos os egressos da CAP estejam na base, em especial os que entraram ou saíram do programa antes de 1980.\nA base de dados (egressos.csv) pode ser baixada aqui. Seus campos são:\n\nPrograma: o código do programa que o egresso cursou;\nNivel: o nível cursado (MESTRADO, DOUTORADO ou ISOLADO);\nRegistro: o número de registro do egresso (ofuscado);\nNome: o nome do egresso (ofuscado);\nAdm: a data de admissão do egresso (no formato YYYY-MM-DD);\nSit: a data de situação final do egresso (no formato YYYY-MM-DD);\nCreditos: o número total de créditos obtidos pelo egresso;\nConceitoGlobal: O conceito global do egresso;\nNascimento: data de nascimento do egresso;\nSexo: sexo do egresso (a base de dados não tem informações sobre gênero);\nPaís: país de nascimento do egresso.\n\nAlguns egressos podem aparecer mais de uma vez na base de dados mas em níveis diferentes (a mesma pessoa pode ter se matriculado, em anos diferentes, como ISOLADO, MESTRADO ou DOUTORADO).\nPrimeiro importamos as bibliotecas que serão usadas neste notebook:\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots"
  },
  {
    "objectID": "egressos.html#sobre",
    "href": "egressos.html#sobre",
    "title": "Egressos",
    "section": "",
    "text": "Esta seção do notebook apresenta informações sobre os egressos da CAP.\nA base de dados foi extraída do controle acadêmico do INPE e contém informações sobre todos os egressos na mesma. É possível que nem todos os egressos da CAP estejam na base, em especial os que entraram ou saíram do programa antes de 1980.\nA base de dados (egressos.csv) pode ser baixada aqui. Seus campos são:\n\nPrograma: o código do programa que o egresso cursou;\nNivel: o nível cursado (MESTRADO, DOUTORADO ou ISOLADO);\nRegistro: o número de registro do egresso (ofuscado);\nNome: o nome do egresso (ofuscado);\nAdm: a data de admissão do egresso (no formato YYYY-MM-DD);\nSit: a data de situação final do egresso (no formato YYYY-MM-DD);\nCreditos: o número total de créditos obtidos pelo egresso;\nConceitoGlobal: O conceito global do egresso;\nNascimento: data de nascimento do egresso;\nSexo: sexo do egresso (a base de dados não tem informações sobre gênero);\nPaís: país de nascimento do egresso.\n\nAlguns egressos podem aparecer mais de uma vez na base de dados mas em níveis diferentes (a mesma pessoa pode ter se matriculado, em anos diferentes, como ISOLADO, MESTRADO ou DOUTORADO).\nPrimeiro importamos as bibliotecas que serão usadas neste notebook:\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots"
  },
  {
    "objectID": "egressos.html#leitura-e-filtro",
    "href": "egressos.html#leitura-e-filtro",
    "title": "Egressos",
    "section": "Leitura e Filtro",
    "text": "Leitura e Filtro\nVamos ler o arquivo egressos.csv em um dataframe:\n\nfile = 'Data/egressos.csv'\ndf = pd.read_csv(file)\n\nEsta base contém registros de todos os egressos de todos os programas do INPE. Vamos filtrar para conter somente os da CAP (alguns registros continham o nome do programa como ECOTEC ou ECOSDA, para os egressos mais antigos).\n\ndf = df[(df['Programa'] == 'PGCAP') | df['Programa'].str.startswith('ECO')]\n\nNem todos os registros estão completos, é preciso eliminar alguns para evitar problemas no processamento posterior.\nVamos eliminar os registros para os quais não temos a data da situação final.\n\ndf = df[df['Sit'] != 'n/r']\n\nAlguns campos foram lidos como strings mas devem ser representados como datas:\n\ndf['Adm'] = pd.to_datetime(df['Adm'], format='%Y-%m-%d')\ndf['Sit'] = pd.to_datetime(df['Sit'], format='%Y-%m-%d')\ndf['Nascimento'] = pd.to_datetime(df['Nascimento'], format='%Y-%m-%d')\n\nPara facilitar o processamento posterior vamos criar campos auxiliares, para representar somente os anos de ingresso e graduação e para representar o número aproximado de meses entre a graduação e ingresso.\n\ndf['AnoAdm'] = df['Adm'].dt.year\ndf['AnoGrad'] = df['Sit'].dt.year.astype(int)\ndf['MesesParaGrad'] = (df['Sit'] - df['Adm']).dt.days/30\ndf['IdadeNaGraduação'] = (df['Sit'] - df['Nascimento']).dt.days / 365.25"
  },
  {
    "objectID": "egressos.html#análise-exploratória-de-dados",
    "href": "egressos.html#análise-exploratória-de-dados",
    "title": "Egressos",
    "section": "Análise Exploratória de Dados",
    "text": "Análise Exploratória de Dados\n\nQuantos alunos se formaram ao longo dos anos?\nVamos começar com uma visualização simples: quantos alunos (de cada nível) se formaram ao longo dos anos?\n\n# Primeiro contamos o número de graduados por ano e nível.\ndf_agg = df.groupby(['AnoGrad', 'Nivel']).size().reset_index(name='Número')\n# Criamos o gráfico de barras acumuladas.\nfig = px.bar(df_agg, x='AnoGrad', y='Número', color='Nivel', \n             title='Número de Graduados por Ano e Nível',\n             labels={'AnoGrad': 'Ano da Graduação', 'count': 'Número'},\n             category_orders={'Nivel': ['MESTRADO', 'DOUTORADO']},\n             barmode='stack')\nfig.update_layout(bargap=0.1)         \nfig.update_xaxes(tickangle=90, dtick=1, tickfont=dict(size=8))               \nfig.show()\n\n                                                \n\n\n\n\n\n\n\n\nNota\n\n\n\nEvitei usar um histograma do plotly porque o agregamento é feito automaticamente e cada barra corresponderá a um período, por exemplo, 2024-2025.\n\n\n\n\nComo é a distribuição do tempo de graduação?\nVamos ver a distribuição do tempo de graduação para mestres e doutores usando um violin plot. Primeiro para mestres:\n\n# Separamos somente os egressos de mestrado.\ndfMSc = df[df['Nivel'] == 'MESTRADO']\n# Criamos o gráfico.\nfig_master = px.violin(dfMSc, y='MesesParaGrad', box=True,  \n                       points=\"all\",\n                       title='Tempo de Graduação para Mestrado',\n                       labels={'MesesParaGrad': 'Meses'},\n                       hover_data={'MesesParaGrad': True, 'Registro': True})\nfig_master.add_shape(type=\"line\", x0=0, x1=1, y0=24, y1=24, \n                     line=dict(color=\"green\", width=2))\nfig_master.add_annotation(x=0.5, y=24, text='24 meses',showarrow=False, \n                          bgcolor='rgba(255, 255, 255, 1)',\n                          font=dict(color='green', size=12))\nfig_master.add_shape(type=\"line\", x0=0, x1=1, y0=36, y1=36, \n                     line=dict(color=\"red\", width=2))\nfig_master.add_annotation(x=0.5, y=36, text='36 meses',showarrow=False, \n                          bgcolor='rgba(255, 255, 255, 1)',\n                          font=dict(color='red', size=12))\nfig_master.show()\n\n                                                \n\n\nFazemos o mesmo para o doutorado.\n\n# Separamos somente os egressos de doutorado.\ndfPhD = df[df['Nivel'] == 'DOUTORADO']\n# Criamos o gráfico.\nfig_phd = px.violin(dfPhD, y='MesesParaGrad', box=True, \n                    points=\"all\",\n                    title='Tempo de Graduação para Doutorado',\n                    labels={'MesesParaGrad': 'Meses'},\n                    hover_data={'MesesParaGrad': True, 'Registro': True})\nfig_phd.add_shape(type=\"line\", x0=0, x1=1, y0=48, y1=48, \n                  line=dict(color=\"green\", width=2))\nfig_phd.add_annotation(x=0.5, y=48, text='48 meses',showarrow=False, \n                       bgcolor='rgba(255, 255, 255, 1)',\n                       font=dict(color='green', size=12))\nfig_phd.add_shape(type=\"line\", x0=0, x1=1, y0=60, y1=60, \n                  line=dict(color=\"red\", width=2))\nfig_phd.add_annotation(x=0.5, y=60, text='60 meses',showarrow=False, \n                       bgcolor='rgba(255, 255, 255, 1)',\n                       font=dict(color='red', size=12))\nfig_phd.show()\n\n                                                \n\n\nEstes gráficos deram a visão geral do tempo para conclusão do mestrado ou doutorado, mas existe alguma variação deste tempo ao longo de uma escala maior de tempo? Vamos verificar como o tempo de conclusão varia ao longo das décadas.\nPrimeiro criamos delimitadores para as décadas, e uma paleta de cores bem subjetiva:\n\ndécadas = [(1970, 1980), (1980, 1990), (1990, 2000), (2000, 2010),\n           (2010, 2020), (2020, 2030)]\ncores = ['#1268AF', '#3F6C91', '#6C7173', '#997656', '#C67B38','#F3801B']\n\nVejamos a variação para os egressos de mestrado:\n\n# Criamos a figura.\nfig = go.Figure()\n# Adicionamos um traço para cada década.\ntraços = 0\nfor i, (início,fim) in enumerate(décadas):\n    dadosDec = dfMSc[(dfMSc['AnoGrad'] &gt;= início) & \n                     (dfMSc['AnoGrad'] &lt; fim)]\n    if not dadosDec.empty:                     \n        fig.add_trace(go.Violin(y=dadosDec['MesesParaGrad'], \n                      name=f'{início}-{fim}', box_visible=True,\n                      meanline_visible=True,\n                      line_color=cores[i]))\n        traços += 1              \n# Ajeitamos legendas e marcações.\nfig.update_layout(title='Tempo de Graduação para Mestrado por Década',\n                  xaxis_title='Década',\n                  yaxis_title='Meses')\nfig.add_shape(type=\"line\", x0=0, x1=traços-1, y0=24, y1=24, \n              line=dict(color=\"green\", width=2))\nfig.add_annotation(x=(traços-1)/2, y=24, text='24 meses',showarrow=False, \n                   bgcolor='rgba(255, 255, 255, 1)',\n                   font=dict(color='green', size=12))\nfig.add_shape(type=\"line\", x0=0, x1=traços-1, y0=36, y1=36, \n              line=dict(color=\"red\", width=2))\nfig.add_annotation(x=(traços-1)/2, y=36, text='36 meses',showarrow=False, \n                   bgcolor='rgba(255, 255, 255, 1)',\n                   font=dict(color='red', size=12))                  \nfig.show()\n\n                                                \n\n\nO mesmo para doutorado:\n\n# Criamos a figura.\nfig = go.Figure()\n# Adicionamos um traço para cada década.\ntraços = 0\nfor i, (início,fim) in enumerate(décadas):\n    dadosDec = dfPhD[(dfPhD['AnoGrad'] &gt;= início) & \n                     (dfPhD['AnoGrad'] &lt; fim)]\n    if not dadosDec.empty:\n        fig.add_trace(go.Violin(y=dadosDec['MesesParaGrad'], \n                      name=f'{início}-{fim}', box_visible=True,\n                      meanline_visible=True,\n                      line_color=cores[i]))\n        traços += 1                     \n# Ajeitamos legendas e marcações.\nfig.update_layout(title='Tempo de Graduação para Doutorado por Década',\n                  xaxis_title='Década',\n                  yaxis_title='Meses')\nfig.add_shape(type=\"line\", x0=0, x1=traços-1, y0=48, y1=48, \n              line=dict(color=\"green\", width=2))\nfig.add_annotation(x=(traços-1)/2, y=48, text='48 meses',showarrow=False, \n                   bgcolor='rgba(255, 255, 255, 1)',\n                   font=dict(color='green', size=12))\nfig.add_shape(type=\"line\", x0=0, x1=traços-1, y0=60, y1=60, \n              line=dict(color=\"red\", width=2))\nfig.add_annotation(x=(traços-1)/2, y=60, text='60 meses',showarrow=False, \n                   bgcolor='rgba(255, 255, 255, 1)',\n                   font=dict(color='red', size=12))\nfig.show()\n\n                                                \n\n\n\n\nComo é a distribuição entre sexos?\nPodemos também visualizar a distribuição dos egressos por ano considerando o sexo, usando um gráfico de barras:\n\n# Agrupamos os mestres por ano e sexo.\ndf_grouped = dfMSc.groupby([df['AnoGrad'], 'Sexo']).size().reset_index(name='Número')\n# Criamos o gráfico.\nfig = px.bar(df_grouped, x='AnoGrad', y='Número', color='Sexo', \n             title='Graduados por Sexo e Ano -- Mestrado',\n             labels={'Número': 'Número de Egressos', 'AnoGrad': 'Ano'})\nfig.show()\n\n                                                \n\n\nFazemos o mesmo para doutorado:\n\n# Agrupamos os doutores por ano e sexo.\ndf_grouped = dfPhD.groupby([df['AnoGrad'], 'Sexo']).size().reset_index(name='Número')\n# Criamos o gráfico.\nfig = px.bar(df_grouped, x='AnoGrad', y='Número', color='Sexo', \n             title='Graduados por Sexo e Ano -- Doutorado',\n             labels={'Número': 'Número de Egressos', 'AnoGrad': 'Ano'})\nfig.show()\n\n                                                \n\n\n\n\nCom que idade os graduandos se formaram?\nPodemos visualizar a distribuição da idade em anos dos egressos quando se formaram:\n\nfig_msc = px.histogram(dfMSc, x='IdadeNaGraduação', \n                       nbins=30, range_x=[0, 60],\n                       title='Distribuição da Idade na Graduação (Mestrado)',\n                       labels={'IdadeNaGraduação': 'Idade na Graduação'},\n                       marginal='box')  \nfig_msc.show()\n\n                                                \n\n\n\nfig_phd = px.histogram(dfPhD, x='IdadeNaGraduação', \n                       nbins=30, range_x=[0, 60],\n                       title='Distribuição da Idade na Graduação (Doutorado)',\n                       labels={'IdadeNaGraduação': 'Idade na Graduação'},\n                       marginal='box') \nfig_phd.show()\n\n                                                \n\n\nExistem diferenças nas distribuições das idades em que se formam para homens e mulheres? Vamos ver para os egressos do mestrado:\n\n# Separamos o dataframe:\ndfMScM = dfMSc[dfMSc['Sexo'] == 'Masculino']\ndfMScF = dfMSc[dfMSc['Sexo'] == 'Feminino']\n# Criamos os gráficos:\nviolinM = go.Violin(y=dfMScM['IdadeNaGraduação'], side='positive', \n                    name='Masculino', marker_color='blue', \n                    box_visible=True, meanline_visible=True,\n                    showlegend=False)\nviolinF = go.Violin(y=dfMScF['IdadeNaGraduação'], side='negative', \n                    name='Feminino', marker_color='red', \n                    box_visible=True, meanline_visible=True,\n                    showlegend=False)\n# Criamos a figura e adicionamos os traços.\nfig = go.Figure()\nfig.add_trace(violinM)\nfig.add_trace(violinF)\n# Ajustes no layout...\nfig.update_layout(title='Idade na Graduação (MSc)',\n                  yaxis_title='Idade em Anos',\n                  violingap=0,\n                  violinmode='overlay',\n                  )\nfig.show()\n\n                                                \n\n\nE agora para o doutorado:\n\n# Separamos o dataframe:\ndfPhDM = dfPhD[dfPhD['Sexo'] == 'Masculino']\ndfPhDF = dfPhD[dfPhD['Sexo'] == 'Feminino']\n# Criamos os gráficos:\nviolinM = go.Violin(y=dfPhDM['IdadeNaGraduação'], side='positive', \n                    name='Masculino', marker_color='blue', \n                    box_visible=True, meanline_visible=True,\n                    showlegend=False)\nviolinF = go.Violin(y=dfPhDF['IdadeNaGraduação'], side='negative', \n                    name='Feminino', marker_color='red', \n                    box_visible=True, meanline_visible=True,\n                    showlegend=False)\n# Criamos a figura e adicionamos os traços.\nfig = go.Figure()\nfig.add_trace(violinM)\nfig.add_trace(violinF)\n# Ajustes no layout...\nfig.update_layout(title='Idade na Graduação (PhD)',\n                  yaxis_title='Idade em Anos',\n                  violingap=0,\n                  violinmode='overlay',\n                  )\nfig.show()"
  },
  {
    "objectID": "egressos.html#outras-análises",
    "href": "egressos.html#outras-análises",
    "title": "Egressos",
    "section": "Outras análises",
    "text": "Outras análises\nApesar dos dados disponíveis serem relativamente limitados, é possível fazer outras análises com algum esforço adicional.\nPor exemplo, podemos extrair da base de dados os egressos que cursaram os dois níveis do programa. Segue o código:\n\n# Agrupa por nome e nível. \nagrNomNiv = df.groupby('Nome')['Nivel'].nunique()\n# Criamos um índice com os nomes dos alunos que completaram dois níveis.\ndoisNíveis = agrNomNiv[agrNomNiv == 2].index\n# Filtra o dataframe original anotando o número de níveis cursados.\ndfdoisNíveis = df[df['Nome'].isin(doisNíveis)]\n# Criamos subsets. \ndf2MSc = dfdoisNíveis[dfdoisNíveis['Nivel'] == 'MESTRADO']\ndf2PhD = dfdoisNíveis[dfdoisNíveis['Nivel'] == 'DOUTORADO']\n# Juntamos por nome, mudando os nomes dos campos.\ndfTemp = df2MSc.merge(df2PhD, on='Nome', suffixes=('_MSc', '_PhD'))\n# Mantemos somente algumas colunas para evitar repetição.\ndfAmbos = dfTemp[['Programa_MSc', 'Registro_MSc', \n                  'Nome', 'Adm_MSc', 'Sit_MSc', 'Adm_PhD', 'Sit_PhD', \n                  'Nascimento_MSc', 'Sexo_MSc']]\n# Por organização renomeamos as colunas comuns.\ndfAmbos = dfAmbos.rename(columns={'Programa_MSc': 'Programa', \n                                  'Registro_MSc': 'Registro',\n                                  'Nascimento_MSc': 'Nascimento',\n                                  'Sexo_MSc': 'Sexo'})\ndfAmbos.to_csv(\"Data/DoisNiveis.csv\")\n\nCom esta informação podemos fazer análises comparativas entre os estudantes que cursaram o mestrado e o doutorado e outros. Só por curiosidade vamos ver como são as linhas do tempo deste subconjunto de egressos:\n\ndfAmbosS = dfAmbos.sort_values(by='Adm_MSc')\n# Criamos a figura\nfig = go.Figure()\n# Adicionamos dois traços, um para cada nível que este estudante cursou.\nindex = 1\nfor _, row in dfAmbosS.iterrows():\n    fig.add_trace(go.Scatter(x=[row['Adm_MSc'], row['Sit_MSc']],\n                             y=[index+1]*2, \n                             mode='lines+markers',\n                             line=dict(color='#4D97C9'), \n                             marker=dict(symbol=['triangle-right', 'triangle-left'],  \n                                         color='#4D97C9', size=8),  \n                             name=row['Nome'],\n                             showlegend=False  \n                            ))\n    fig.add_trace(go.Scatter(x=[row['Adm_PhD'], row['Sit_PhD']],\n                             y=[index+1]*2,  \n                             mode='lines+markers',\n                             line=dict(color='#0C416C'), \n                             marker=dict(symbol=['triangle-right', 'triangle-left'],  \n                                         color='#0C416C', size=8),  \n                             name=row['Nome'],\n                             showlegend=False \n                            ))\n    index += 1                        \n# Ajustamos o layout.\nfig.update_layout(title='Linha do Tempo para Egressos que Cursaram os Dois Níveis',\n                  xaxis_title='Ano',xaxis_tickangle=90, \n                  yaxis_visible=False,\n                  showlegend=False\n                 )\n# Mostramos a figura.\nfig.show()\n\n                                                \n\n\nEmbora ilustrativo este gráfico não é tão útil, mas pode dar ideias para outras análises."
  }
]